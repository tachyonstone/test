import java.applet.Applet;
import java.awt.Color;
import java.awt.Graphics;
public class Sotuken2 extends Applet {
	int h0 = 700;
	int count = 0;
	int allPoints;

	double[] [] X =new double[3][1000]; 
	double[] [] Y =new double[3][1000]; 
	double[] [] XX =new double[1000][1000];
	double[] [] YY =new double[1000][1000];

	int N=4;
	int MM=27;




	public void init() {
		
		allPoints = 28; 

/*
		X[1][1] = 20;
		X[1][2] = 20;
		X[1][3] = 45;
		X[1][4] = 60;
		X[1][5] = 90;
		X[1][6] = 100;
		X[1][7] = 134;
		X[1][8] = 134;
		X[1][9] = 110;
		X[1][10] = 110;
		X[1][11] = 137;
		X[1][12] = 137;
		X[1][13] = 110;
		X[1][14] = 110;
		X[1][15] = 140;
		X[1][16] = 140;
		X[1][17] = 110;
		X[1][18] = 110;
		X[1][19] = 135;
		X[1][20] = 135;
		X[1][21] = 110;
		X[1][22] = 110;
		X[1][23] = 100;
		X[1][24] = 100;
		X[1][25] = 90;
		X[1][26] = 50;
		X[1][27] = 20;

		
		
		Y[1][1] = 600;
		Y[1][2] = 580;
		Y[1][3] = 580;
		Y[1][4] = 580;
		Y[1][5] = 580;
		Y[1][6] = 570;
		Y[1][7] = 570;
		Y[1][8] = 577;
		Y[1][9] = 577;
		Y[1][10] = 580;
		Y[1][11] = 580;
		Y[1][12] = 588;
		Y[1][13] = 588;
		Y[1][14] = 591;
		Y[1][15] = 591;
		Y[1][16] = 599;
		Y[1][17] = 599;
		Y[1][18] = 602;
		Y[1][19] = 602;
		Y[1][20] = 610;
		Y[1][21] = 610;
		Y[1][22] = 630;
		Y[1][23] = 630;
		Y[1][24] = 610;
		Y[1][25] = 600;
		Y[1][26] = 600;
		Y[1][27] = 600;
		
*/

		X[1][1] = 34;
		X[1][2] = 38;
		X[1][3] = 64;
		X[1][4] = 80;
		X[1][5] = 95;
		X[1][6] = 107;
		X[1][7] = 121;
		X[1][8] = 129;
		X[1][9] = 118;
		X[1][10] = 111;
		X[1][11] = 120;
		X[1][12] = 126;
		X[1][13] = 114;
		X[1][14] = 107;
		X[1][15] = 117;
		X[1][16] = 124;
		X[1][17] = 110;
		X[1][18] = 102;
		X[1][19] = 111;
		X[1][20] = 116;
		X[1][21] = 101;
		X[1][22] = 90;
		X[1][23] = 99;
		X[1][24] = 100;
		X[1][25] = 96;
		X[1][26] = 73;
		X[1][27] = 38;

		
		
		Y[1][1] = 600;
		Y[1][2] = 582;
		Y[1][3] = 585;
		Y[1][4] = 595;
		Y[1][5] = 616;
		Y[1][6] = 609;
		Y[1][7] = 624;
		Y[1][8] = 621;
		Y[1][9] = 610;
		Y[1][10] = 617;
		Y[1][11] = 629;
		Y[1][12] = 628;
		Y[1][13] = 616;
		Y[1][14] = 624;
		Y[1][15] = 637;
		Y[1][16] = 636;
		Y[1][17] = 622;
		Y[1][18] = 630;
		Y[1][19] = 641;
		Y[1][20] = 640;
		Y[1][21] = 625;
		Y[1][22] = 638;
		Y[1][23] = 642;
		Y[1][24] = 632;
		Y[1][25] = 616;
		Y[1][26] = 597;
		Y[1][27] = 602;
		

        X[2][1] = 930;
        X[2][2] = 930;
        X[2][3] = 955;
        X[2][4] = 980;
        X[2][5] = 980;
        X[2][6] = 990;
        X[2][7] = 990;
        X[2][8] = 983;
        X[2][9] = 983;
        X[2][10] = 980;
        X[2][11] = 980;
        X[2][12] = 972;
        X[2][13] = 972;
        X[2][14] = 969;
        X[2][15] = 969;
		X[2][16] = 961;
		X[2][17] = 961;
		X[2][18] = 958;
		X[2][19] = 958;
		X[2][20] = 950;
		X[2][21] = 950;
		X[2][22] = 930;
		X[2][23] = 930;
		X[2][24] = 950;
		X[2][25] = 960;
		X[2][26] = 960;
		X[2][27] = 930;




		Y[2][1] = 600;
		Y[2][2] = 580;
		Y[2][3] = 580;
		Y[2][4] = 600;
		Y[2][5] = 640;
		Y[2][6] = 650;
		Y[2][7] = 684;
		Y[2][8] = 684;
		Y[2][9] = 665;
		Y[2][10] = 665;
		Y[2][11] = 687;
		Y[2][12] = 687;
		Y[2][13] = 665;
		Y[2][14] = 665;
		Y[2][15] = 690;
		Y[2][16] = 690;
		Y[2][17] = 665;
		Y[2][18] = 665;
		Y[2][19] = 685;
		Y[2][20] = 685;
		Y[2][21] = 660;
		Y[2][22] = 660;
		Y[2][23] = 650;
		Y[2][24] = 650;
		Y[2][25] = 640;
		Y[2][26] = 600;
		Y[2][27] = 600;



/////
		XX[1][1] = 60;
		XX[1][2] = 62;
		XX[1][3] = 63;
		XX[1][4] = 66;
		XX[1][5] = 68;
		XX[1][6] = 71;
		XX[1][7] = 75;
		XX[1][8] = 80;
		XX[1][9] = 85;
		XX[1][10] = 90;
		XX[1][11] = 95;
		XX[1][12] = 98;
		XX[1][13] = 100;
		XX[1][14] = 103;
		XX[1][15] = 105;
		XX[1][16] = 106;
		XX[1][17] = 106;
		XX[1][18] = 107;
		XX[1][19] = 110;
		XX[1][20] = 114;
		XX[1][21] = 117;
		XX[1][22] = 122;
		XX[1][23] = 118;
		XX[1][24] = 110;
		XX[1][25] = 102;
		XX[1][26] = 90;
		XX[1][27] = 80;
		

		YY[1][1] = 650;
		YY[1][2] = 652;
		YY[1][3] = 654;
		YY[1][4] = 657;
		YY[1][5] = 659;
		YY[1][6] = 661;
		YY[1][7] = 663;
		YY[1][8] = 664;
		YY[1][9] = 665;
		YY[1][10] = 664;
		YY[1][11] = 663;
		YY[1][12] = 661;
		YY[1][13] = 660;
		YY[1][14] = 656;
		YY[1][15] = 653;
		YY[1][16] = 650;
		YY[1][17] = 645;
		YY[1][18] = 638;
		YY[1][19] = 636;
		YY[1][20] = 634;
		YY[1][21] = 632;
		YY[1][22] = 630;
		YY[1][23] = 629;
		YY[1][24] = 629;
		YY[1][25] = 630;
		YY[1][26] = 630;
		YY[1][27] = 631;
	////

		XX[2][1] = 34;
		XX[2][2] = 38;
		XX[2][3] = 64;
		XX[2][4] = 80;
		XX[2][5] = 95;
		XX[2][6] = 107;
		XX[2][7] = 121;
		XX[2][8] = 129;
		XX[2][9] = 118;
		XX[2][10] = 111;
		XX[2][11] = 120;
		XX[2][12] = 126;
		XX[2][13] = 114;
		XX[2][14] = 107;
		XX[2][15] = 117;
		XX[2][16] = 124;
		XX[2][17] = 110;
		XX[2][18] = 102;
		XX[2][19] = 111;
		XX[2][20] = 116;
		XX[2][21] = 101;
		XX[2][22] = 90;
		XX[2][23] = 99;
		XX[2][24] = 100;
		XX[2][25] = 96;
		XX[2][26] = 73;
		XX[2][27] = 38;

		
		
		YY[2][1] = 600;
		YY[2][2] = 582;
		YY[2][3] = 585;
		YY[2][4] = 595;
		YY[2][5] = 616;
		YY[2][6] = 609;
		YY[2][7] = 624;
		YY[2][8] = 621;
		YY[2][9] = 610;
		YY[2][10] = 617;
		YY[2][11] = 629;
		YY[2][12] = 628;
		YY[2][13] = 616;
		YY[2][14] = 624;
		YY[2][15] = 637;
		YY[2][16] = 636;
		YY[2][17] = 622;
		YY[2][18] = 630;
		YY[2][19] = 641;
		YY[2][20] = 640;
		YY[2][21] = 625;
		YY[2][22] = 638;
		YY[2][23] = 642;
		YY[2][24] = 632;
		YY[2][25] = 616;
		YY[2][26] = 597;
		YY[2][27] = 602;

		XX[2+N][1] = 560;
		XX[2+N][2] = 562;
		XX[2+N][3] = 563;
		XX[2+N][4] = 566;
		XX[2+N][5] = 568;
		XX[2+N][6] = 571;
		XX[2+N][7] = 575;
		XX[2+N][8] = 580;
		XX[2+N][9] = 585;
		XX[2+N][10] = 590;
		XX[2+N][11] = 595;
		XX[2+N][12] = 598;
		XX[2+N][13] = 600;
		XX[2+N][14] = 603;
		XX[2+N][15] = 605;
		XX[2+N][16] = 606;
		XX[2+N][17] = 606;
		XX[2+N][18] = 607;
		XX[2+N][19] = 610;
		XX[2+N][20] = 614;
		XX[2+N][21] = 617;
		XX[2+N][22] = 622;
		XX[2+N][23] = 618;
		XX[2+N][24] = 610;
		XX[2+N][25] = 602;
		XX[2+N][26] = 590;
		XX[2+N][27] = 580;
		

		YY[2+N][1] = 650;
		YY[2+N][2] = 652;
		YY[2+N][3] = 654;
		YY[2+N][4] = 657;
		YY[2+N][5] = 659;
		YY[2+N][6] = 661;
		YY[2+N][7] = 663;
		YY[2+N][8] = 664;
		YY[2+N][9] = 665;
		YY[2+N][10] = 664;
		YY[2+N][11] = 663;
		YY[2+N][12] = 661;
		YY[2+N][13] = 660;
		YY[2+N][14] = 656;
		YY[2+N][15] = 653;
		YY[2+N][16] = 650;
		YY[2+N][17] = 645;
		YY[2+N][18] = 638;
		YY[2+N][19] = 636;
		YY[2+N][20] = 634;
		YY[2+N][21] = 632;
		YY[2+N][22] = 630;
		YY[2+N][23] = 629;
		YY[2+N][24] = 629;
		YY[2+N][25] = 630;
		YY[2+N][26] = 630;
		YY[2+N][27] = 631;
		


		setBackground(Color.white); 
		}
	



    public void paint(Graphics g){  
    	int[] xp1 = new int[allPoints];
    	int[] yp1 = new int[allPoints];       
    	for(int i =1;i<allPoints;i++){
    	xp1[i] = (int)X[1][i];
    	yp1[i] = h0-(int)Y[1][i];
    	}

    	int[] xp2 = new int[allPoints];
    	int[] yp2 = new int[allPoints];       
    	for(int i =1;i<allPoints;i++){
    	xp2[i] = (int)X[2][i];
    	yp2[i] = h0-(int)Y[2][i];
    	System.out.println(X[2][i]+","+Y[2][i]);
    	}

    	g.setColor(Color.red);    


    	Keyframe();
    	int[] xp = new int[allPoints];
    	int[] yp = new int[allPoints];

    	for(int time=1;time<N+3;time++){
    	System.out.println(time);
    	for(int i=1;i<allPoints;i++){
    	
    	xp[i] = (int)XX[time][i];
    	yp[i] = h0 - (int)YY[time][i];
    	System.out.println(" " + i + "[" + xp[i] + "," +yp[i] + "]");
    	}
    	System.out.println();
    	g.setColor(Color.white);
    	g.fillRect(0,0,1280,1024);
    	g.setColor(Color.black);
    	xp1[0] = xp1[1];
    	yp1[0] = yp1[1];
    	xp2[0] = xp2[1];
    	yp2[0] = yp2[1];
    	g.drawPolyline(xp1,yp1,allPoints);
    	g.drawPolyline(xp2,yp2,allPoints);
    	xp[0] = xp[1];
    	yp[0] = yp[1];

    	g.drawPolyline(xp,yp,allPoints);
    	try{Thread.sleep(1000);}
    	catch(InterruptedException e){}
    	}
    	}

    public void Keyframe(){
    	double T,R,XXX,YYY,XA,YA;
    	double RTBX,RTBY,LTBX,LTBY;
    	double K1,K2,KK1,KK2;
    	double RBX,RBY,RTX,RTY;
    	double LBX,LBY,LTX,LTY;
    	double DX1,DX2,DY1,DY2;

    	int i,j;
    	int KAK=0;
    	double TENX=0;
    	R=3.1415926/180.0;

for(i=1;i<=2+N;i++){
    	T = (i-1.0)/(N+1.0);
    	for(j=0;j<=MM;j++){
    	if(i==1){
    	XX[i][j]=X[1][j];
    	YY[i][j]=Y[1][j];
    	}else if(i==2+N){
    	XX[i][j]=X[2][j];
    	YY[i][j]=Y[2][j];
    	}else if(j==1){
    	XX[i][j]=(1-T)*X[1][1]+T*X[2][1];
    	YY[i][j]=(1-T)*Y[1][1]+T*Y[2][1];
    	XA=XX[i][j]*Math.cos(KAK*T*R)+YY[i][j]*Math.sin(KAK*T*R);
    	YA=XX[i][j]*Math.sin(KAK*T*R)+YY[i][j]*Math.cos(KAK*T*R);
    	XX[i][j]=XA+TENX*T;
    	YY[i][j]=YA+TENX*T;
    	}else if(j==MM){
    	XX[i][j]=(1-T)*X[1][MM]+T*X[2][MM];
    	YY[i][j]=(1-T)*Y[1][MM]+T*Y[2][MM];
    	XA=XX[i][j]*Math.cos(KAK*T*R)+YY[i][j]*Math.sin(KAK*T*R);
    	YA=XX[i][j]*Math.sin(KAK*T*R)+YY[i][j]*Math.cos(KAK*T*R);
    	XX[i][j]=XA+TENX*T;
    	YY[i][j]=YA+TENX*T;
    	}
    	}
    	}

    	for(i=1;i<=2+N;i++){
    	T = (i-1.0)/(N+1.0);
    	for(j=2;j<=MM;j++){
    	if((i>1)&&(i<2+N)){
    	if((j==1)&&(j==MM)){
    	System.out.println("errof");
    	}else{
    	DX1=X[1][j-1]*(1-T)+X[2][j-1]*T;
    	DY1=Y[1][j-1]*(1-T)+Y[2][j-1]*T;
    	DX2=X[1][j+1]*(1-T)+X[2][j+1]*T;
    	DY2=Y[1][j+1]*(1-T)+Y[2][j+1]*T;
    	LTX=DX1-X[1][j-1]+X[1][j];
    	LTY=DY1-Y[1][j-1]+Y[1][j];
    	LBX=DX2-X[1][j+1]+X[1][j];
    	LBY=DY2-Y[1][j+1]+Y[1][j];
    	RTX=DX1-X[2][j-1]+X[2][j];
    	RTY=DY1-Y[2][j-1]+Y[2][j];
    	RBX=DX2-X[2][j+1]+X[2][j];
    	RBY=DY2-Y[2][j+1]+Y[2][j];
    	KK1=Math.sqrt(Math.pow((X[1][j+1]-X[1][j-1]),2)+Math.pow((Y[1][j+1]-Y[1][j-1]),2));
    	KK2=Math.sqrt(Math.pow((X[2][j+1]-X[1][j-1]),2)+Math.pow((Y[2][j+1]-Y[2][j-1]),2));
    	K1=Math.sqrt(Math.pow((X[1][j]-X[1][j-1]),2)+Math.pow((Y[1][j]-Y[1][j-1]),2))/KK1;
    	K2=Math.sqrt(Math.pow((X[2][j]-X[2][j-1]),2)+Math.pow((Y[2][j]-Y[2][j-1]),2))/KK2;
    	LTBX=LTX*(1-K1)+LBX*K1;
    	LTBY=LTY*(1-K1)+LBY*K1;
    	RTBX=RTX*(1-K2)+RBX*K2;
    	RTBY=RTY*(1-K2)+RBY*K2;
    	XXX=LTBX*(1-T)+RTBX*T;
    	YYY=LTBY*(1-T)+RTBY*T;
    	XA=XXX*Math.cos(R*T)+YYY*Math.sin(R*T);
    	YA=XXX*Math.sin(R*T)+YYY*Math.cos(R*T);
    	XX[i][j]=XA+TENX*T;
    	YY[i][j]=YA+TENX*T;
    	}
    	}
    	}
    	}
    	}
}